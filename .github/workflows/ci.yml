name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  GO_VERSION: '1.20'
  CGO_ENABLED: '1'

jobs:

  # ÂçïÂÖÉÊµãËØï
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run tests
        run: make test

  # Linux AMD64 ÁºñËØëÈ™åËØÅ
  build-linux-amd64:
    name: Build Linux AMD64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install musl-tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build Linux AMD64
        run: make linux_amd64

      - name: Verify binaries
        run: |
          echo "=== Linux AMD64 Build Verification ==="
          echo "Checking chaosblade-operator binary..."
          file build/_output/bin/chaosblade-operator
          echo "Checking chaos_fuse binary..."
          file target/chaosblade-$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo '0.0.0')/bin/chaos_fuse
          
          echo "=== Binary Sizes ==="
          ls -lh build/_output/bin/
          ls -lh target/chaosblade-$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo '0.0.0')/bin/
          
          echo "=== Version Information ==="
          if [ -f "build/_output/bin/chaosblade-operator" ]; then
            echo "chaosblade-operator version:"
            ./build/_output/bin/chaosblade-operator version 2>/dev/null || echo "Unable to get version information"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64-binaries
          path: |
            build/_output/bin/chaosblade-operator
            target/chaosblade-$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo '0.0.0')/bin/
            target/chaosblade-$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo '0.0.0')/yaml/
          retention-days: 7

  # Linux ARM64 ÁºñËØëÈ™åËØÅ
  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install ARM64 cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu musl-tools

      - name: Build Linux ARM64
        run: make linux_arm64

      - name: Verify binaries
        run: |
          echo "=== Linux ARM64 Build Verification ==="
          echo "Checking chaosblade-operator binary..."
          file build/_output/bin/chaosblade-operator
          echo "Checking chaos_fuse binary..."
          file target/chaosblade-$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo '0.0.0')/bin/chaos_fuse
          
          echo "=== Binary Sizes ==="
          ls -lh build/_output/bin/
          ls -lh target/chaosblade-$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo '0.0.0')/bin/
          
          echo "=== Architecture Verification ==="
          echo "Expected architecture: ARM64"
          if file build/_output/bin/chaosblade-operator | grep -q "ARM"; then
            echo "‚úì chaosblade-operator is ARM64"
          else
            echo "‚úó chaosblade-operator architecture mismatch"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-binaries
          path: |
            build/_output/bin/chaosblade-operator
            target/chaosblade-$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo '0.0.0')/bin/
            target/chaosblade-$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo '0.0.0')/yaml/
          retention-days: 7

  # ÊûÑÂª∫ÊÄªÁªì
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-linux-amd64, build-linux-arm64, test]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate build summary
        run: |
          echo "=== ChaosBlade Operator CI Build Summary ==="
          echo "Build completed at: $(date)"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "Build Status:"
          echo "- Test: ${{ needs.test.result }}"
          echo "- Linux AMD64: ${{ needs.build-linux-amd64.result }}"
          echo "- Linux ARM64: ${{ needs.build-linux-arm64.result }}"
          echo ""
          if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.build-linux-amd64.result }}" = "success" ] && [ "${{ needs.build-linux-arm64.result }}" = "success" ]; then
            echo "All builds completed successfully! üéâ"
          else
            echo "Some builds failed. Please check the logs above. ‚ùå"
            exit 1
          fi
