name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.os }} - Test - Go ${{ matrix.go_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go_version:
          - "1.25"
        os:
          - ubuntu-latest
    steps:
      - name: Set Up Go ${{ matrix.go_version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go_version }}
        id: go

      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run code style and import order verification
        run: make verify
      - name: Tests
        id: test
        run: |
          make test

  build-matrix:
    name: Build on ${{ matrix.os }} (${{ matrix.goos }}/${{ matrix.goarch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            platform: linux_amd64
            runner_arch: x64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            platform: linux_arm64
            runner_arch: arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的 Git 历史用于版本信息

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools build-essential
          # Install ARM64 cross-compilation tools if needed
          if [ "${{ matrix.goarch }}" = "arm64" ] && [ "$(uname -m)" != "aarch64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      - name: Build ${{ matrix.platform }}
        id: build
        run: |
          make ${{ matrix.platform }}

      - name: Verify Build Output
        id: verify
        run: |
          echo "Verifying build output for ${{ matrix.platform }}..."
          echo "Build architecture: $(uname -m)"
          
          # 检查 chaosblade-operator 二进制文件
          if [ -f "build/_output/bin/chaosblade-operator" ]; then
            echo "✅ chaosblade-operator binary found"
            file build/_output/bin/chaosblade-operator
            ls -lh build/_output/bin/chaosblade-operator
          else
            echo "❌ chaosblade-operator binary not found"
            exit 1
          fi
          
          # 检查 chaos_fuse 二进制文件
          BLADE_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo '0.0.0')
          BUILD_DIR="target/chaosblade-${BLADE_VERSION}"
          if [ -f "${BUILD_DIR}/bin/chaos_fuse" ]; then
            echo "✅ chaos_fuse binary found in ${BUILD_DIR}/bin/"
            file "${BUILD_DIR}/bin/chaos_fuse"
            ls -lh "${BUILD_DIR}/bin/chaos_fuse"
          else
            echo "❌ chaos_fuse binary not found in ${BUILD_DIR}/bin/"
            ls -la "${BUILD_DIR}/bin/" || echo "Build directory not found"
            exit 1
          fi
          
          # 检查 YAML 文件
          if [ -f "${BUILD_DIR}/yaml/chaosblade-k8s-spec-${BLADE_VERSION}.yaml" ]; then
            echo "✅ YAML specification file found"
            ls -lh "${BUILD_DIR}/yaml/"
          else
            echo "❌ YAML specification file not found"
            ls -la "${BUILD_DIR}/yaml/" || echo "YAML directory not found"
            exit 1
          fi
          
          echo "=== Build Summary for ${{ matrix.platform }} ==="
          echo "All required files built successfully!"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-binaries
          path: |
            build/_output/bin/chaosblade-operator
            target/chaosblade-*/bin/
            target/chaosblade-*/yaml/
          retention-days: 7
