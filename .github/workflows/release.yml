name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g: 1.8.0)'
        required: true
        default: '1.8.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: chaosblade-io/chaosblade-operator
  GO_VERSION: '1.20'

permissions:
  contents: write
  packages: write

jobs:
  build-and-push-images:
    name: Build and Push Images
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runs-on: ubuntu-latest
            dockerfile: build/image/amd/Dockerfile
            image_suffix: ""
            image_tag: "ghcr.io/chaosblade-io/chaosblade-operator"
          - os: linux
            arch: arm64
            runs-on: ubuntu-24.04-arm
            dockerfile: build/image/arm/Dockerfile
            image_suffix: "-arm64"
            image_tag: "ghcr.io/chaosblade-io/chaosblade-operator-arm64"
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            VERSION="${VERSION#v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PASSWORD }}

      - name: Build and Push ${{ matrix.arch }} image
        env:
          BLADE_VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Building ${{ matrix.arch }} image..."
          echo "BLADE_VERSION: $BLADE_VERSION"
          echo "Image tag: ${{ matrix.image_tag }}:${{ steps.version.outputs.version }}"
          make build_linux_${{ matrix.arch }}_image
          
          echo "Built images:"
          podman images | grep chaosblade-operator
          
          echo "Pushing ${{ matrix.arch }} image..."
          podman push ${{ matrix.image_tag }}:${{ steps.version.outputs.version }}
          
          # Only push latest tag if version doesn't contain 'dev'
          if [[ "${{ steps.version.outputs.version }}" != *"dev"* ]]; then
            echo "Pushing latest tag..."
            podman tag ${{ matrix.image_tag }}:${{ steps.version.outputs.version }} ${{ matrix.image_tag }}:latest
            podman push ${{ matrix.image_tag }}:latest
          else
            echo "Skipping latest tag push for dev version: ${{ steps.version.outputs.version }}"
          fi

  package-and-upload-helm:
    name: Package and Upload Helm Charts
    runs-on: ubuntu-latest
    needs: build-and-push-images
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from previous job
        id: version
        run: |
          echo "version=${{ needs.build-and-push-images.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.9.3

      - name: Package Helm Charts
        env:
          BLADE_VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Packaging Helm charts for version ${BLADE_VERSION}..."
          # Use Makefile tasks to build and package Helm charts
          make build_linux_amd64_helm
          make build_linux_arm64_helm
          
          echo "Generated Helm packages:"
          ls -la target/*.tgz

      - name: Setup OSSUTIL environment
        uses: yizhoumo/setup-ossutil@v1.1.3
        env:
          BINARY_TAG: ${{ steps.version.outputs.version }}
        with:
          endpoint: ${{ secrets.OSS_ENDPOINT }}
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          ossutil-version: '1.7.14'

      - name: Upload Helm packages to OSS
        env:
          BINARY_TAG: ${{ steps.version.outputs.version }}
        run: |
          echo "Uploading Helm packages to OSS..."
          ossutil cp -f target/chaosblade-operator-amd64-${BINARY_TAG}.tgz oss://chaosblade/agent/github/${BINARY_TAG}/chaosblade-operator-amd64-${BINARY_TAG}.tgz
          ossutil cp -f target/chaosblade-operator-arm64-${BINARY_TAG}.tgz oss://chaosblade/agent/github/${BINARY_TAG}/chaosblade-operator-arm64-${BINARY_TAG}.tgz
          echo "Helm packages uploaded successfully"

      - name: Upload Helm packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: helm-packages
          path: |
            target/chaosblade-operator-amd64-${{ steps.version.outputs.version }}.tgz
            target/chaosblade-operator-arm64-${{ steps.version.outputs.version }}.tgz
          retention-days: 30

  create-release:
    name: Create GitHub Release
    needs: [build-and-push-images, package-and-upload-helm]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from previous job
        id: version
        run: |
          echo "version=${{ needs.build-and-push-images.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Download Helm packages
        uses: actions/download-artifact@v4
        with:
          name: helm-packages

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          generate_release_notes: true
          body: |
            ## ChaosBlade Operator v${{ steps.version.outputs.version }}
            
            ### New Release
            
            **Build Time**: ${{ github.event.head_commit.timestamp }}
            **Git Commit**: ${{ github.sha }}
            
            ### Helm Package Downloads
            
            - [chaosblade-operator-amd64 (AMD64)](https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/chaosblade-operator-amd64-${{ steps.version.outputs.version }}.tgz)
            - [chaosblade-operator-arm64 (ARM64)](https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/chaosblade-operator-arm64-${{ steps.version.outputs.version }}.tgz)
            
            ### Docker Images
            
            ```bash
            # AMD64
            docker pull ghcr.io/chaosblade-io/chaosblade-operator:v${{ steps.version.outputs.version }}
            
            # ARM64
            docker pull ghcr.io/chaosblade-io/chaosblade-operator-arm64:v${{ steps.version.outputs.version }}
            ```
            
            ### Helm Installation
            
            ```bash
            # AMD64
            helm install chaosblade-operator ./chaosblade-operator-amd64-${{ steps.version.outputs.version }}.tgz
            
            # ARM64
            helm install chaosblade-operator ./chaosblade-operator-arm64-${{ steps.version.outputs.version }}.tgz
            ```
            
            ### OSS Download Links
            
            - [chaosblade-operator-amd64-${{ steps.version.outputs.version }}.tgz](https://chaosblade.oss-cn-hangzhou.aliyuncs.com/agent/github/v${{ steps.version.outputs.version }}/chaosblade-operator-amd64-${{ steps.version.outputs.version }}.tgz)
            - [chaosblade-operator-arm64-${{ steps.version.outputs.version }}.tgz](https://chaosblade.oss-cn-hangzhou.aliyuncs.com/agent/github/v${{ steps.version.outputs.version }}/chaosblade-operator-arm64-${{ steps.version.outputs.version }}.tgz)
            
          files: |
            target/chaosblade-operator-amd64-${{ steps.version.outputs.version }}.tgz
            target/chaosblade-operator-arm64-${{ steps.version.outputs.version }}.tgz
          draft: true
          prerelease: false
