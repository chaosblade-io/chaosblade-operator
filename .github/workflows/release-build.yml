name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.8.0)'
        required: true
        default: '1.8.0'
      vendor:
        description: '供应商 (community/aliyun)'
        required: false
        default: 'community'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: chaosblade-io/chaosblade-operator

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            dockerfile: build/image/amd/Dockerfile
            image_suffix: ""
          - os: linux
            arch: arm64
            dockerfile: build/image/arm/Dockerfile
            image_suffix: "-arm64"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于版本信息

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            VERSION="${VERSION#v}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Set vendor
        id: vendor
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VENDOR="${{ github.event.inputs.vendor }}"
          else
            VENDOR="community"
          fi
          echo "vendor=${VENDOR}" >> $GITHUB_OUTPUT

      - name: Get Git info
        id: git
        run: |
          echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
          echo "build_time=$(date -u '+%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Show build info
        run: |
          echo "=== 构建信息 ==="
          echo "版本: ${{ steps.version.outputs.version }}"
          echo "标签: ${{ steps.version.outputs.tag }}"
          echo "供应商: ${{ steps.vendor.outputs.vendor }}"
          echo "Git提交: ${{ steps.git.outputs.commit }}"
          echo "Git分支: ${{ steps.git.outputs.branch }}"
          echo "构建时间: ${{ steps.git.outputs.build_time }}"
          echo "目标平台: ${{ matrix.os }}/${{ matrix.arch }}"
          echo "=================="

      - name: Build binary
        env:
          BLADE_VERSION: ${{ steps.version.outputs.version }}
          BLADE_VENDOR: ${{ steps.vendor.outputs.vendor }}
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          make build_binary

      - name: Build YAML specs
        env:
          BLADE_VERSION: ${{ steps.version.outputs.version }}
          BLADE_VENDOR: ${{ steps.vendor.outputs.vendor }}
        run: |
          make build_yaml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.os }}/${{ matrix.arch }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:${{ steps.version.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image_suffix }}:latest
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ steps.git.outputs.commit }}
            org.opencontainers.image.created=${{ steps.git.outputs.build_time }}
            org.opencontainers.image.vendor=ChaosBlade
            org.opencontainers.image.description=ChaosBlade Operator for Kubernetes

      - name: Create Release Assets
        if: matrix.arch == 'amd64'
        run: |
          mkdir -p release-assets
          cp -r target/chaosblade-${{ steps.version.outputs.version }}/* release-assets/
          tar -czf chaosblade-operator-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C release-assets .
          echo "构建产物已打包: chaosblade-operator-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz"

      - name: Upload Release Assets
        if: matrix.arch == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: chaosblade-operator-${{ steps.version.outputs.version }}
          path: |
            chaosblade-operator-${{ steps.version.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
            target/chaosblade-${{ steps.version.outputs.version }}/

  create-release:
    name: Create Release
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          VERSION="${VERSION#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download Release Assets
        uses: actions/download-artifact@v4
        with:
          name: chaosblade-operator-${{ steps.version.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: ChaosBlade Operator v${{ steps.version.outputs.version }}
          body: |
            ## ChaosBlade Operator v${{ steps.version.outputs.version }}
            
            ### 新版本发布
            
            **构建时间**: ${{ github.event.head_commit.timestamp }}
            **Git提交**: ${{ github.sha }}
            
            ### 下载
            
            - [Linux AMD64](https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/chaosblade-operator-${{ steps.version.outputs.version }}-linux-amd64.tar.gz)
            
            ### Docker镜像
            
            ```bash
            # AMD64
            docker pull ghcr.io/chaosblade-io/chaosblade-operator:v${{ steps.version.outputs.version }}
            
            # ARM64
            docker pull ghcr.io/chaosblade-io/chaosblade-operator-arm64:v${{ steps.version.outputs.version }}
            ```
            
            ### 变更日志
            
            请查看 [CHANGELOG.md](CHANGELOG.md) 了解详细变更。
          files: |
            chaosblade-operator-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
          draft: false
          prerelease: false
